#define n_quad (4)
#define n_dim (3)
#define num_fem (8)

h_bigInt bisection_search_index(const h_bigInt* sortedArr, h_bigInt value, h_bigInt start, h_bigInt end)
{
  h_bigInt fail = -1;
  h_bigInt L = start;
  h_bigInt R = end-1;
  while (L <= R){
    const h_bigInt m = (L+R)/2;
    if(sortedArr[m] < value){
      L = m + 1;
    } else if (sortedArr[m] > value){
      R = m - 1;
    } else {
      return m;
    }
  }
  return fail;
}

h_bigInt linear_search_index(const h_bigInt* unsortedArr, h_bigInt value, h_bigInt start, h_bigInt end)
{
  h_bigInt fail = -1;
  for(h_bigInt idx = start; idx < end; ++idx){
    if(unsortedArr[idx] == value){
      return idx;
    }
  }
  return fail;
}

/* Basis functions and derivatives in 3D */
 h_Real phi_3D_1(h_Real q_r[4][3], int q) { return q_r[q][0]; }
 h_Real phi_3D_2(h_Real q_r[4][3], int q) { return q_r[q][1]; }
 h_Real phi_3D_3(h_Real q_r[4][3], int q) { return q_r[q][2]; }
 h_Real phi_3D_4(h_Real q_r[4][3], int q) { return 1.0 - q_r[q][0] - q_r[q][1] - q_r[q][2]; }
 void dphi(h_Real deriv[3], int q)
{
  if(q==0){
    deriv[0] = 1.0;
    deriv[1] = 0.0;
    deriv[2] = 0.0;
  }

  if(q==1){
    deriv[0] = 0.0;
    deriv[1] = 1.0;
    deriv[2] = 0.0;
  }

  if(q==2){
    deriv[0] = 0.0;
    deriv[1] = 0.0;
    deriv[2] = 1.0;
  }

  if(q==3){
    deriv[0] = -1.0;
    deriv[1] = -1.0;
    deriv[2] = -1.0;
  }
}

/* Math functions */
h_bigInt maximum(h_bigInt a, h_bigInt b) { return a > b ? a : b; }

h_Real determinant(h_Real A[3][3]) {
  /*
   * Computes the determinant of a matrix
   */

  h_Real d_1 = A[0][0] * (A[1][1] * A[2][2] - A[2][1] * A[1][2]);
  h_Real d_2 = A[0][1] * (A[1][0] * A[2][2] - A[2][0] * A[1][2]);
  h_Real d_3 = A[0][2] * (A[1][0] * A[2][1] - A[2][0] * A[1][1]);

  return d_1 - d_2 + d_3;
}

void inverse(h_Real invA[3][3], h_Real A[3][3]) {
  /*
   * Computes the inverse of a matrix
   */
  h_Real inv_det_A = 1.0 / determinant(A);
  invA[0][0] = inv_det_A * (A[1][1] * A[2][2] - A[2][1] * A[1][2]);
  invA[0][1] = inv_det_A * (A[0][2] * A[2][1] - A[2][2] * A[0][1]);
  invA[0][2] = inv_det_A * (A[0][1] * A[1][2] - A[1][1] * A[0][2]);
  invA[1][0] = inv_det_A * (A[1][2] * A[2][0] - A[2][2] * A[1][0]);
  invA[1][1] = inv_det_A * (A[0][0] * A[2][2] - A[2][0] * A[0][2]);
  invA[1][2] = inv_det_A * (A[0][2] * A[1][0] - A[1][2] * A[0][0]);
  invA[2][0] = inv_det_A * (A[1][0] * A[2][1] - A[2][0] * A[1][1]);
  invA[2][1] = inv_det_A * (A[0][1] * A[2][0] - A[2][1] * A[0][0]);
  invA[2][2] = inv_det_A * (A[0][0] * A[1][1] - A[1][0] * A[0][1]);
}

 void quadrature_rule(h_Real q_r[4][3], h_Real q_w[4]) {
    h_Real a = (5.0 + 3.0 * sqrt(5.0)) / 20.0;
    h_Real b = (5.0 - sqrt(5.0)) / 20.0;

    q_r[0][0] = a;
    q_r[0][1] = b;
    q_r[0][2] = b;
    q_r[1][0] = b;
    q_r[1][1] = a;
    q_r[1][2] = b;
    q_r[2][0] = b;
    q_r[2][1] = b;
    q_r[2][2] = a;
    q_r[3][0] = b;
    q_r[3][1] = b;
    q_r[3][2] = b;

    q_w[0] = 1.0 / 24.0;
    q_w[1] = 1.0 / 24.0;
    q_w[2] = 1.0 / 24.0;
    q_w[3] = 1.0 / 24.0;
}

void mesh_connectivity(int v_coord[8][3], int t_map[8][4]) {

  (v_coord)[0][0] = 0;
  (v_coord)[0][1] = 0;
  (v_coord)[0][2] = 0;
  (v_coord)[1][0] = 1;
  (v_coord)[1][1] = 0;
  (v_coord)[1][2] = 0;
  (v_coord)[2][0] = 0;
  (v_coord)[2][1] = 1;
  (v_coord)[2][2] = 0;
  (v_coord)[3][0] = 1;
  (v_coord)[3][1] = 1;
  (v_coord)[3][2] = 0;
  (v_coord)[4][0] = 0;
  (v_coord)[4][1] = 0;
  (v_coord)[4][2] = 1;
  (v_coord)[5][0] = 1;
  (v_coord)[5][1] = 0;
  (v_coord)[5][2] = 1;
  (v_coord)[6][0] = 0;
  (v_coord)[6][1] = 1;
  (v_coord)[6][2] = 1;
  (v_coord)[7][0] = 1;
  (v_coord)[7][1] = 1;
  (v_coord)[7][2] = 1;

  (t_map)[0][0] = 0;
  (t_map)[0][1] = 2;
  (t_map)[0][2] = 1;
  (t_map)[0][3] = 4;
  (t_map)[1][0] = 1;
  (t_map)[1][1] = 0;
  (t_map)[1][2] = 3;
  (t_map)[1][3] = 5;
  (t_map)[2][0] = 2;
  (t_map)[2][1] = 6;
  (t_map)[2][2] = 3;
  (t_map)[2][3] = 0;
  (t_map)[3][0] = 3;
  (t_map)[3][1] = 2;
  (t_map)[3][2] = 7;
  (t_map)[3][3] = 1;
  (t_map)[4][0] = 4;
  (t_map)[4][1] = 5;
  (t_map)[4][2] = 6;
  (t_map)[4][3] = 0;
  (t_map)[5][0] = 5;
  (t_map)[5][1] = 7;
  (t_map)[5][2] = 4;
  (t_map)[5][3] = 1;
  (t_map)[6][0] = 6;
  (t_map)[6][1] = 7;
  (t_map)[6][2] = 2;
  (t_map)[6][3] = 4;
  (t_map)[7][0] = 7;
  (t_map)[7][1] = 3;
  (t_map)[7][2] = 6;
  (t_map)[7][3] = 5;
}

 void x_map(h_Real x[3], h_Real q_r[4][3], h_Real x_t[3][4], int q) {
  int i, d;

  for (d = 0; d < n_dim; d++) {
    x[d] = x_t[d][0] * phi_3D_1(q_r, q);
    x[d] += x_t[d][1] * phi_3D_2(q_r, q);
    x[d] += x_t[d][2] * phi_3D_3(q_r, q);
    x[d] += x_t[d][3] * phi_3D_4(q_r, q);
  }
}

 void J_xr_map(h_Real J_xr[3][3], h_Real q_r[4][3], h_Real x_t[3][4]){
  int i, j, k;
  h_Real deriv[3];

  for (i = 0; i < n_dim; i++) {
    for (j = 0; j < n_dim; j++) {
      J_xr[i][j] = 0.0;

      for (k = 0; k < n_dim + 1; k++) {
        dphi(deriv, k);

        J_xr[i][j] += x_t[i][k] * deriv[j];
      }
    }
  }
}
@kernel void computeStiffnessMatrix(
  const int Nelements,
  const int nrows,
  @restrict const dfloat * x,
  @restrict const dfloat * y,
  @restrict const dfloat * z,
  @restrict const dfloat * mask,
  @restrict const h_bigInt * glo_num,
  @restrict const h_bigInt * rows,
  @restrict const h_bigInt * row_offsets,
  @restrict const h_bigInt * cols,
  @restrict float * stiffnessMatrix
)
{

  for (int e = 0; e < Nelements; e++;@outer) {
    @shared h_Real q_r[4][3];
    @shared h_Real q_w[4];
    @shared int v_coord[8][3];
    @shared int t_map[8][4];

    for (int s_y = 0; s_y < p_Nq-1; s_y++;@inner) {
      for (int s_x = 0; s_x < p_Nq-1; s_x++;@inner) {
        if(s_x == 0 && s_y == 0){
          quadrature_rule(q_r, q_w);
          mesh_connectivity(v_coord, t_map);
        }
      }
    }
    /* Cycle through collocated quads/hexes */
    for (int s_z = 0; s_z < p_Nq-1; s_z++) {
      @barrier("local");
      for (int s_y = 0; s_y < p_Nq-1; s_y++;@inner) {
        for (int s_x = 0; s_x < p_Nq-1; s_x++;@inner) {
          h_Real A_loc[4][4];
          h_Real J_xr[3][3];
          h_Real J_rx[3][3];
          h_Real x_t[3][4];
          h_Real q_x[3];
          /* Get indices */
          int s[n_dim];

          s[0] = s_x;
          s[1] = s_y;
          s[2] = s_z;

          int idx[8];

          for (int i = 0; i < 8; i++) {
            idx[i] = 0;
            idx[i] += (s[0] + v_coord[i][0]) * 1;
            idx[i] += (s[1] + v_coord[i][1]) * p_Nq;
            idx[i] += (s[2] + v_coord[i][2]) * p_Nq * p_Nq;
          }

          /* Cycle through collocated triangles/tets */
          for (int t = 0; t < num_fem; t++) {
            /* Get vertices */
            for (int i = 0; i < n_dim + 1; i++) {
                x_t[0][i] = x[idx[t_map[t][i]] + e * p_Np];
                x_t[1][i] = y[idx[t_map[t][i]] + e * p_Np];
                x_t[2][i] = z[idx[t_map[t][i]] + e * p_Np];
            }

            /* Local FEM matrices */
            /* Reset local stiffness and mass matrices */
            for (int i = 0; i < n_dim + 1; i++) {
              for (int j = 0; j < n_dim + 1; j++) {
                A_loc[i][j] = 0.0;
              }
            }

            /* Build local stiffness matrices by applying quadrature rules */
            J_xr_map(J_xr, q_r, x_t);
            inverse(J_rx, J_xr);
            const h_Real det_J_xr = determinant(J_xr);
            for (int q = 0; q < n_quad; q++) {
              /* From r to x */
              x_map(q_x, q_r, x_t, q);

              /* Integrand */
              for (int i = 0; i < n_dim + 1; i++) {
                h_Real deriv_i[3];
                dphi(deriv_i, i);
                for (int j = 0; j < n_dim + 1; j++) {
                  h_Real deriv_j[3];
                  dphi(deriv_j, j);
                  int alpha, beta;
                  h_Real func = 0.0;

                  for (alpha = 0; alpha < n_dim; alpha++) {
                    h_Real a = 0.0, b = 0.0;

                    for (beta = 0; beta < n_dim; beta++) {
                      a += deriv_i[beta] * J_rx[beta][alpha];

                      b += deriv_j[beta] * J_rx[beta][alpha];
                    }

                    func += a * b;
                  }

                  A_loc[i][j] += func * det_J_xr * q_w[q];
                }
              }
            }
            for (int i = 0; i < n_dim + 1; i++) {
              for (int j = 0; j < n_dim + 1; j++) {
                if ((mask[idx[t_map[t][i]] + e * p_Np] > 0.0) &&
                    (mask[idx[t_map[t][j]] + e * p_Np] > 0.0)) {
                  h_bigInt row = glo_num[idx[t_map[t][i]] + e * p_Np];
                  h_bigInt col = glo_num[idx[t_map[t][j]] + e * p_Np];
                  h_bigInt local_row_id;
                  if(p_rows_sorted)
                    local_row_id = bisection_search_index(rows, row, 0, nrows);
                  else
                    local_row_id = linear_search_index(rows, row, 0, nrows);
                  h_bigInt start = row_offsets[local_row_id];
                  h_bigInt end = row_offsets[local_row_id+1];

                  h_bigInt col_idx;
                  if(p_cols_sorted)
                    col_idx = bisection_search_index(cols, col, start, end);
                  else
                    col_idx = linear_search_index(cols, col, start, end);
                  h_bigInt id = col_idx;
                  @atomic stiffnessMatrix[id] += A_loc[i][j];
                }
              }
            }
          }
        }
      }
    }
  }
}
