// TODO: defined through kernel props
#define p_elementsPerBlock 2
#define NOT_AN_ELEMENT (-1)
@kernel void fusedFDM(
  const dlong Nelements,
#if p_overlap
  @restrict const dlong*  elementList,
#endif
  @restrict pfloat* Su,
  @restrict const pfloat* S_x,
  @restrict const pfloat* S_y,
  @restrict const pfloat* S_z,
  @restrict const pfloat* inv_L,
#if p_restrict
  @restrict const dfloat* wts,
#endif
  @restrict pfloat* u
  )
{
  //for (dlong my_elem = 0; my_elem < Nelements; ++my_elem; @outer) {
  for (dlong eb = 0; eb < (Nelements+p_elementsPerBlock-1)/p_elementsPerBlock; ++eb; @outer) {
    @shared pfloat  S_x_e[p_elementsPerBlock][p_Nq_e][p_Nq_e];
    @shared pfloat  S_y_e[p_elementsPerBlock][p_Nq_e][p_Nq_e];
    @shared pfloat  S_z_e[p_elementsPerBlock][p_Nq_e][p_Nq_e];
    @shared pfloat S_x_eT[p_elementsPerBlock][p_Nq_e][p_Nq_e];
    @shared pfloat S_y_eT[p_elementsPerBlock][p_Nq_e][p_Nq_e];
    @shared pfloat S_z_eT[p_elementsPerBlock][p_Nq_e][p_Nq_e];
    @shared pfloat  work1[p_elementsPerBlock][p_Nq_e][p_Nq_e][p_Nq_e];
    @shared pfloat  work2[p_elementsPerBlock][p_Nq_e][p_Nq_e][p_Nq_e];
    @exclusive dlong element[p_elementsPerBlock];

    for(int k = 0; k < p_Nq_e; ++k) {
      @barrier("local");
      for(int j = 0; j < p_Nq_e; ++j; @inner) {
        for(int i = 0; i < p_Nq_e; ++i; @inner) {
          #pragma unroll
          for(int e = 0; e < p_elementsPerBlock; ++e){
            const int my_elem = e + eb;
            if(my_elem < Nelements){
#if p_overlap
              element[e] = elementList[my_elem];
#else
              element[e] = my_elem;
#endif
              const dlong elem_offset = element[e] * p_Nq_e * p_Nq_e * p_Nq_e;
              const dlong idx = i + j * p_Nq_e + k * p_Nq_e * p_Nq_e + elem_offset;
              work1[e][k][j][i] = u[idx];
            } else {
              element[e] = NOT_AN_ELEMENT;
            }
          }
        }
      }
    }
    @barrier("local");
    for(int k = 0; k < p_Nq_e; ++k; @inner){
      for(int j = 0; j < p_Nq_e; ++j; @inner){
        if(k >= 1 && k < p_Nq_e - 1 && j >= 1 && j < p_Nq_e - 1) {
          #pragma unroll
          for(int e = 0; e < p_elementsPerBlock; ++e){
            if(element[e] != NOT_AN_ELEMENT){
              const int l1 = 0;
              const int l2 = 2;
              work1[e][l1][j][k] = work1[e][l1][j][k] - work1[e][l2][j][k];
              work1[e][p_Nq_e - l1 - 1][j][k] = work1[e][p_Nq_e - l1 - 1][j][k] -
                                         work1[e][p_Nq_e - l2 - 1][j][k];
            }
          }
        }
      }
    }
    @barrier("local");
    for(int k = 0; k < p_Nq_e; ++k; @inner){
      for(int i = 0; i < p_Nq_e; ++i; @inner){
        if(k >= 1 && k < p_Nq_e - 1 && i >= 1 && i < p_Nq_e - 1) {
          #pragma unroll
          for(int e = 0; e < p_elementsPerBlock; ++e){
            if(element[e] != NOT_AN_ELEMENT){
              const int l1 = 0;
              const int l2 = 2;
              work1[e][i][l1][k] = work1[e][i][l1][k] - work1[e][i][l2][k];
              work1[e][i][p_Nq_e - l1 - 1][k] = work1[e][i][p_Nq_e - l1 - 1][k] -
                                             work1[e][i][p_Nq_e - l2 - 1][k];
            }
          }
        }
      }
    }
    @barrier("local");
    for(int j = 0; j < p_Nq_e; ++j; @inner){
      for(int i = 0; i < p_Nq_e; ++i; @inner){
        if(i >= 1 && i < p_Nq_e - 1 && j >= 1 && j < p_Nq_e - 1) {
          #pragma unroll
          for(int e = 0; e < p_elementsPerBlock; ++e){
            if(element[e] != NOT_AN_ELEMENT){
              const int l1 = 0;
              const int l2 = 2;
              work1[e][i][j][l1] = work1[e][i][j][l1] - work1[e][i][j][l2];
              work1[e][i][j][p_Nq_e - l1 - 1] = work1[e][i][j][p_Nq_e - l1 - 1] -
                                             work1[e][i][j][p_Nq_e - l2 - 1];
            }
          }
        }
      }
    }
    @barrier("local");
    for (int i = 0; i < p_Nq_e; i++; @inner){
      for (int j = 0; j < p_Nq_e; j++; @inner) {
        #pragma unroll
        for(int e = 0; e < p_elementsPerBlock; ++e){
          if(element[e] != NOT_AN_ELEMENT){
            const int ij = j + i * p_Nq_e;
             S_x_e[e][i][j] = S_x[ij + element[e] * p_Nq_e * p_Nq_e];
             S_y_e[e][i][j] = S_y[ij + element[e] * p_Nq_e * p_Nq_e];
             S_z_e[e][i][j] = S_z[ij + element[e] * p_Nq_e * p_Nq_e];
            S_x_eT[e][j][i] = S_x_e[e][i][j];
            S_y_eT[e][j][i] = S_y_e[e][i][j];
            S_z_eT[e][j][i] = S_z_e[e][i][j];
          }
        }
      }
    }
    @barrier("local");
    for (int k = 0; k < p_Nq_e; k++; @inner) {
      for (int j = 0; j < p_Nq_e; j++; @inner) {
        #pragma unroll
        for(int e = 0; e < p_elementsPerBlock; ++e){
          if(element[e] != NOT_AN_ELEMENT){
#pragma unroll
            for (int i = 0; i < p_Nq_e; i++) {
              pfloat value = 0.0;
#pragma unroll
              for (int l = 0; l < p_Nq_e; l++)
                value += S_x_eT[e][j][l] * work1[e][k][i][l];
              work2[e][k][j][i] = value;
            }
          }
        }
      }
    }
    @barrier("local");
    for (int k = 0; k < p_Nq_e; k++; @inner) {
      for (int j = 0; j < p_Nq_e; j++; @inner) {
        #pragma unroll
        for(int e = 0; e < p_elementsPerBlock; ++e){
          if(element[e] != NOT_AN_ELEMENT){
#pragma unroll
            for (int i = 0; i < p_Nq_e; i++) {
              pfloat value = 0.0;
#pragma unroll
              for (int l = 0; l < p_Nq_e; l++)
                value += S_y_eT[e][j][l] * work2[e][k][i][l];
              work1[e][j][i][k] = value;
            }
          }
        }
      }
    }
    @barrier("local");
    for (int k = 0; k < p_Nq_e; k++) {
      @barrier("local");
      for (int j = 0; j < p_Nq_e; j++; @inner) {
        for (int i = 0; i < p_Nq_e; i++; @inner) {
          #pragma unroll
          for(int e = 0; e < p_elementsPerBlock; ++e){
            if(element[e] != NOT_AN_ELEMENT){
              const int v = i + j * p_Nq_e + k * p_Nq_e * p_Nq_e;
              pfloat value = 0.0;
#pragma unroll
              for (int l = 0; l < p_Nq_e; l++)
                value += S_z_eT[e][k][l] * work1[e][j][i][l];
              work2[e][k][j][i] = value * inv_L[v + element[e] * p_Nq_e * p_Nq_e * p_Nq_e];
            }
          }
        }
      }
    }
    @barrier("local");
    for (int k = 0; k < p_Nq_e; k++; @inner) {
      for (int j = 0; j < p_Nq_e; j++; @inner) {
        #pragma unroll
        for(int e = 0; e < p_elementsPerBlock; ++e){
          if(element[e] != NOT_AN_ELEMENT){
#pragma unroll
            for (int i = 0; i < p_Nq_e; i++) {
              pfloat value = 0.0;
#pragma unroll
              for (int l = 0; l < p_Nq_e; l++)
                value += S_x_e[e][i][l] * work2[e][k][j][l];
              work1[e][k][i][j] = value;
            }
          }
        }
      }
    }
    @barrier("local");
    for (int k = 0; k < p_Nq_e; k++; @inner) {
      for (int j = 0; j < p_Nq_e; j++; @inner) {
        #pragma unroll
        for(int e = 0; e < p_elementsPerBlock; ++e){
          if(element[e] != NOT_AN_ELEMENT){
#pragma unroll
            for (int i = 0; i < p_Nq_e; i++) {
              pfloat value = 0.0;
#pragma unroll
              for (int l = 0; l < p_Nq_e; l++)
                value += S_y_e[e][j][l] * work1[e][k][i][l];
              work2[e][j][i][k] = value;
            }
          }
        }
      }
    }
    @barrier("local");
    for (int k = 0; k < p_Nq_e; k++) {
      @barrier("local");
      for (int j = 0; j < p_Nq_e; j++; @inner) {
        for (int i = 0; i < p_Nq_e; i++; @inner) {
          #pragma unroll
          for(int e = 0; e < p_elementsPerBlock; ++e){
            if(element[e] != NOT_AN_ELEMENT){
              pfloat value = 0.0;
#pragma unroll
              for (int l = 0; l < p_Nq_e; l++)
                value += S_z_e[e][k][l] * work2[e][j][i][l];

#if (!p_restrict)
              const dlong elem_offset = element[e] * p_Nq_e * p_Nq_e * p_Nq_e;
              const int v = i + j * p_Nq_e + k * p_Nq_e * p_Nq_e + elem_offset;
              Su[v] = value;
#endif
              work1[e][k][j][i] = value;
            }
          }
        }
      }
    }
#if (!p_restrict)
    @barrier("local");
    for(int k = 0; k < p_Nq_e; ++k; @inner){
      for(int j = 0; j < p_Nq_e; ++j; @inner){
        if(k >= 1 && k < p_Nq_e - 1 && j >= 1 && j < p_Nq_e - 1) {
          #pragma unroll
          for(int e = 0; e < p_elementsPerBlock; ++e){
            if(element[e] != NOT_AN_ELEMENT){
              const int l1 = 0;
              const int l2 = 0;
              work2[e][l1][j][k] = work1[e][l2][j][k];
              work2[e][p_Nq_e - l1 - 1][j][k] = work1[e][p_Nq_e - l2 - 1][j][k];
            }
          }
        }
      }
    }
    @barrier("local");
    for(int k = 0; k < p_Nq_e; ++k; @inner){
      for(int i = 0; i < p_Nq_e; ++i; @inner){
        if(k >= 1 && k < p_Nq_e - 1 && i >= 1 && i < p_Nq_e - 1) {
          #pragma unroll
          for(int e = 0; e < p_elementsPerBlock; ++e){
            if(element[e] != NOT_AN_ELEMENT){
              const int l1 = 0;
              const int l2 = 0;
              work2[e][i][l1][k] = work1[e][i][l2][k];
              work2[e][i][p_Nq_e - l1 - 1][k] = work1[e][i][p_Nq_e - l2 - 1][k];
            }
          }
        }
      }
    }
    @barrier("local");
    for(int j = 0; j < p_Nq_e; ++j; @inner){
      for(int i = 0; i < p_Nq_e; ++i; @inner){
        if(i >= 1 && i < p_Nq_e - 1 && j >= 1 && j < p_Nq_e - 1) {
          #pragma unroll
          for(int e = 0; e < p_elementsPerBlock; ++e){
            if(element[e] != NOT_AN_ELEMENT){
              const int l1 = 0;
              const int l2 = 0;
              work2[e][i][j][l1] = work1[e][i][j][l2];
              work2[e][i][j][p_Nq_e - l1 - 1] = work1[e][i][j][p_Nq_e - l2 - 1];
            }
          }
        }
      }
    }
    @barrier("local");
    for(int k = 0; k < p_Nq_e; ++k){
      @barrier("local");
      for(int j = 0; j < p_Nq_e; ++j; @inner){
        for(int i = 0; i < p_Nq_e; ++i; @inner) {
          #pragma unroll
          for(int e = 0; e < p_elementsPerBlock; ++e){
            if(element[e] != NOT_AN_ELEMENT){
              const dlong elem_offset = element[e] * p_Nq_e * p_Nq_e * p_Nq_e;
              const dlong idx = i + j * p_Nq_e + k * p_Nq_e * p_Nq_e + elem_offset;
              u[idx] = work2[e][k][j][i];
            }
          }
        }
      }
    }

#else  /* if (!p_restrict) */
    @barrier("local");
    for(int k = 0; k < p_Nq; ++k){
      @barrier("local");
      for(int j = 0; j < p_Nq_e; ++j; @inner){
        for(int i = 0; i < p_Nq_e; ++i; @inner){
          if(i < p_Nq && j < p_Nq) {
            #pragma unroll
            for(int e = 0; e < p_elementsPerBlock; ++e){
              if(element[e] != NOT_AN_ELEMENT){
                const dlong elem_offset = element[e] * p_Nq * p_Nq * p_Nq;
                const dlong idx = i + j * p_Nq + k * p_Nq * p_Nq + elem_offset;
                Su[idx] = work1[e][k + 1][j + 1][i + 1] * wts[idx];
              }
            }
          }
        }
      }
    }

#endif
  }
}
