

@kernel void fusedFDM(
  const dlong Nelements,
#if p_overlap
  @restrict const dlong*  elementList,
#endif
  @restrict pfloat* Su,
  @restrict const pfloat* S_x,
  @restrict const pfloat* S_y,
  @restrict const pfloat* S_z,
  @restrict const pfloat* inv_L,
#if p_restrict
  @restrict const dfloat* wts,
#endif
  @restrict pfloat* u
  )
{
  for (dlong my_elem = 0; my_elem < Nelements; ++my_elem; @outer(0)) {
    @shared pfloat S_x_e[p_Nq_e][p_Nq_e];
    @shared pfloat S_y_e[p_Nq_e][p_Nq_e];
    @shared pfloat S_z_e[p_Nq_e][p_Nq_e];
    @shared pfloat S_x_eT[p_Nq_e][p_Nq_e];
    @shared pfloat S_y_eT[p_Nq_e][p_Nq_e];
    @shared pfloat S_z_eT[p_Nq_e][p_Nq_e];
    @shared pfloat work1[p_Nq_e][p_Nq_e][p_Nq_e];
    @shared pfloat work2[p_Nq_e][p_Nq_e][p_Nq_e];
    @exclusive dlong element;

    for(int k = 0; k < p_Nq_e; ++k; @inner(1)) {
      for(int j = 0; j < p_Nq_e; ++j; @inner(0)) {
        #pragma unroll
        for(int i = 0; i < p_Nq_e; ++i) {
#if p_overlap
          element = elementList[my_elem];
#else
          element = my_elem;
#endif
          const dlong elem_offset = element * p_Nq_e * p_Nq_e * p_Nq_e;
          const dlong idx = i + j * p_Nq_e + k * p_Nq_e * p_Nq_e + elem_offset;
          work1[k][j][i] = u[idx];
        }
      }
    }

    @barrier("local");

    for(int k = 0; k < p_Nq_e; ++k; @inner(1)){
      for(int j = 0; j < p_Nq_e; ++j; @inner(0)){
        if(k >= 1 && k < p_Nq_e - 1 && j >= 1 && j < p_Nq_e - 1) {
          const int l1 = 0;
          const int l2 = 2;
          work1[l1][j][k] = work1[l1][j][k] - work1[l2][j][k];
          work1[p_Nq_e - l1 - 1][j][k] = work1[p_Nq_e - l1 - 1][j][k] -
                                         work1[p_Nq_e - l2 - 1][j][k];
        }
      }
    }
    @barrier("local");
    for(int k = 0; k < p_Nq_e; ++k; @inner(1)){
      for(int i = 0; i < p_Nq_e; ++i; @inner(0)){
        if(k >= 1 && k < p_Nq_e - 1 && i >= 1 && i < p_Nq_e - 1) {
          const int l1 = 0;
          const int l2 = 2;
          work1[i][l1][k] = work1[i][l1][k] - work1[i][l2][k];
          work1[i][p_Nq_e - l1 - 1][k] = work1[i][p_Nq_e - l1 - 1][k] -
                                         work1[i][p_Nq_e - l2 - 1][k];
        }
      }
    }
    @barrier("local");
    for(int j = 0; j < p_Nq_e; ++j; @inner(1)){
      for(int i = 0; i < p_Nq_e; ++i; @inner(0)){
        if(i >= 1 && i < p_Nq_e - 1 && j >= 1 && j < p_Nq_e - 1) {
          const int l1 = 0;
          const int l2 = 2;
          work1[i][j][l1] = work1[i][j][l1] - work1[i][j][l2];
          work1[i][j][p_Nq_e - l1 - 1] = work1[i][j][p_Nq_e - l1 - 1] -
                                         work1[i][j][p_Nq_e - l2 - 1];
        }
      }
    }
    @barrier("local");
    for (int i = 0; i < p_Nq_e; i++; @inner(1)){
      for (int j = 0; j < p_Nq_e; j++; @inner(0)) {
        const int ij = j + i * p_Nq_e;
        S_x_e[i][j] = S_x[ij + element * p_Nq_e * p_Nq_e];
        S_y_e[i][j] = S_y[ij + element * p_Nq_e * p_Nq_e];
        S_z_e[i][j] = S_z[ij + element * p_Nq_e * p_Nq_e];
        S_x_eT[j][i] = S_x_e[i][j];
        S_y_eT[j][i] = S_y_e[i][j];
        S_z_eT[j][i] = S_z_e[i][j];
      }
    }

    @barrier("local");

    for (int k = 0; k < p_Nq_e; k++; @inner(1)) {
      for (int j = 0; j < p_Nq_e; j++; @inner(0)) {
        #pragma unroll
        for (int i = 0; i < p_Nq_e; i++) {
          pfloat value = 0.0;
          #pragma unroll
          for (int l = 0; l < p_Nq_e; l++){
            value += S_x_eT[j][l] * work1[k][i][l];
          }
          work2[k][j][i] = value;
        }
      }
    }

    @barrier("local");

    for (int k = 0; k < p_Nq_e; k++; @inner(1)) {
      for (int j = 0; j < p_Nq_e; j++; @inner(0)) {
        #pragma unroll
        for (int i = 0; i < p_Nq_e; i++) {
          pfloat value = 0.0;
          #pragma unroll
          for (int l = 0; l < p_Nq_e; l++){
            value += S_y_eT[j][l] * work2[k][i][l];
          }
          work1[j][i][k] = value;
        }
      }
    }

    @barrier("local");

    for (int k = 0; k < p_Nq_e; k++; @inner(1)) {
      for (int j = 0; j < p_Nq_e; j++; @inner(0)) {
        for (int i = 0; i < p_Nq_e; i++) {
          const int v = i + j * p_Nq_e + k * p_Nq_e * p_Nq_e;
          pfloat value = 0.0;
          #pragma unroll
          for (int l = 0; l < p_Nq_e; l++){
            value += S_z_eT[k][l] * work1[j][i][l];
          }
          work2[k][j][i] = value * inv_L[v + element * p_Nq_e * p_Nq_e * p_Nq_e];
        }
      }
    }

    @barrier("local");

    for (int k = 0; k < p_Nq_e; k++; @inner(1)) {
      for (int j = 0; j < p_Nq_e; j++; @inner(0)) {
        #pragma unroll
        for (int i = 0; i < p_Nq_e; i++) {
          pfloat value = 0.0;
          #pragma unroll
          for (int l = 0; l < p_Nq_e; l++){
            value += S_x_e[i][l] * work2[k][j][l];
          }
          work1[k][i][j] = value;
        }
      }
    }

    @barrier("local");

    for (int k = 0; k < p_Nq_e; k++; @inner(1)) {
      for (int j = 0; j < p_Nq_e; j++; @inner(0)) {
        #pragma unroll
        for (int i = 0; i < p_Nq_e; i++) {
          pfloat value = 0.0;
          #pragma unroll
          for (int l = 0; l < p_Nq_e; l++){
            value += S_y_e[j][l] * work1[k][i][l];
          }
          work2[j][i][k] = value;
        }
      }
    }

    @barrier("local");

    for (int k = 0; k < p_Nq_e; k++; @inner(1)) {
      for (int j = 0; j < p_Nq_e; j++; @inner(0)) {
        for (int i = 0; i < p_Nq_e; i++) {
          pfloat value = 0.0;
          #pragma unroll
          for (int l = 0; l < p_Nq_e; l++)
            value += S_z_e[k][l] * work2[j][i][l];

#if (!p_restrict)
          const dlong elem_offset = element * p_Nq_e * p_Nq_e * p_Nq_e;
          const int v = i + j * p_Nq_e + k * p_Nq_e * p_Nq_e + elem_offset;
          Su[v] = value;
#endif
          work1[k][j][i] = value;
        }
      }
    }

#if (!p_restrict)

    @barrier("local");

    for(int k = 0; k < p_Nq_e; ++k; @inner(1)){
      for(int j = 0; j < p_Nq_e; ++j; @inner(0)){
        if(k >= 1 && k < p_Nq_e - 1 && j >= 1 && j < p_Nq_e - 1) {
          const int l1 = 0;
          const int l2 = 0;
          work2[l1][j][k] = work1[l2][j][k];
          work2[p_Nq_e - l1 - 1][j][k] = work1[p_Nq_e - l2 - 1][j][k];
        }
      }
    }

    @barrier("local");

    for(int k = 0; k < p_Nq_e; ++k; @inner(1)){
      for(int i = 0; i < p_Nq_e; ++i; @inner(0)){
        if(k >= 1 && k < p_Nq_e - 1 && i >= 1 && i < p_Nq_e - 1) {
          const int l1 = 0;
          const int l2 = 0;
          work2[i][l1][k] = work1[i][l2][k];
          work2[i][p_Nq_e - l1 - 1][k] = work1[i][p_Nq_e - l2 - 1][k];
        }
      }
    }

    @barrier("local");

    for(int j = 0; j < p_Nq_e; ++j; @inner(1)){
      for(int i = 0; i < p_Nq_e; ++i; @inner(0)){
        if(i >= 1 && i < p_Nq_e - 1 && j >= 1 && j < p_Nq_e - 1) {
          const int l1 = 0;
          const int l2 = 0;
          work2[i][j][l1] = work1[i][j][l2];
          work2[i][j][p_Nq_e - l1 - 1] = work1[i][j][p_Nq_e - l2 - 1];
        }
      }
    }

    @barrier("local");

    for(int k = 0; k < p_Nq_e; ++k; @inner(1)){
      for(int j = 0; j < p_Nq_e; ++j; @inner(0)){
        for(int i = 0; i < p_Nq_e; ++i) {
          const dlong elem_offset = element * p_Nq_e * p_Nq_e * p_Nq_e;
          const dlong idx = i + j * p_Nq_e + k * p_Nq_e * p_Nq_e + elem_offset;
          u[idx] = work2[k][j][i];
        }
      }
    }

#else  /* if (!p_restrict) */

    @barrier("local");

    for(int k = 0; k < p_Nq_e; ++k; @inner(1)){
      for(int j = 0; j < p_Nq_e; ++j; @inner(0)){
        if(k < p_Nq && j < p_Nq) {
          for(int i = 0; i < p_Nq; ++i){
            const dlong elem_offset = element * p_Nq * p_Nq * p_Nq;
            const dlong idx = i + j * p_Nq + k * p_Nq * p_Nq + elem_offset;
            Su[idx] = work1[k + 1][j + 1][i + 1] * wts[idx];
          }
        }
      }
    }

#endif
  }
}
