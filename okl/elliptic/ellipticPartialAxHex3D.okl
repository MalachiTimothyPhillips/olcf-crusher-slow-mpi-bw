#if defined(gfxXX)
#define PREVENT_UNROLL 1
#endif

#define USE_HIP_BONE_KERNEL

#ifndef USE_HIP_BONE_KERNEL
@kernel void ellipticPartialAxHex3D(const dlong Nelements,
                                    const dlong offset,
                                    const dlong loffset,
                                    @restrict const dlong*  elementList,
                                    @restrict const dfloat* ggeo,
                                    @restrict const dfloat* D,
                                    @restrict const dfloat* S,
                                    @restrict const dfloat* lambda,
                                    @restrict const dfloat* q,
                                    @restrict       dfloat* Aq)
{
  for(dlong e = 0; e < Nelements; ++e; @outer(0)) {

#if defined(FP32) && defined(gfxXX)
    @shared dfloat s_D[p_Nq][p_Nq];
#elif (p_Nq % 2 == 0)
    @shared dfloat s_D[p_Nq][p_Nq+1];
#else
    @shared dfloat s_D[p_Nq][p_Nq];
#endif
    @shared dfloat s_q[p_Nq][p_Nq];

    @shared dfloat s_Gqr[p_Nq][p_Nq];
    @shared dfloat s_Gqs[p_Nq][p_Nq];

    @exclusive dfloat r_qt, r_Gqt, r_Auk;
    @exclusive dfloat r_q[p_Nq];
    @exclusive dfloat r_Aq[p_Nq];

    @exclusive dlong element;

    @exclusive dfloat r_G00, r_G01, r_G02, r_G11, r_G12, r_G22, r_GwJ;

    for(int j = 0; j < p_Nq; ++j; @inner(1))
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
        s_D[j][i] = D[p_Nq * j + i];
        element = elementList[e];
      }

    @barrier("local");

    for(int j = 0; j < p_Nq; ++j; @inner(1)) {
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
#pragma unroll p_Nq
        for(int k = 0; k < p_Nq; k++) {
          const dlong base = i + j * p_Nq + element * p_Np;
          r_q[k] = q[base + k * p_Nq * p_Nq];
          r_Aq[k] = 0;
        }
      }
    }

    @barrier("local");

#if !defined(PREVENT_UNROLL)
#pragma unroll p_Nq
#endif
    for(int k = 0; k < p_Nq; k++) {
      @barrier("local");
      for(int j = 0; j < p_Nq; ++j; @inner(1))
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          const dlong gbase = element * p_Nggeo * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;

          r_G00 = ggeo[gbase + p_G00ID * p_Np];
          r_G01 = ggeo[gbase + p_G01ID * p_Np];
          r_G02 = ggeo[gbase + p_G02ID * p_Np];

          r_G11 = ggeo[gbase + p_G11ID * p_Np];
          r_G12 = ggeo[gbase + p_G12ID * p_Np];
          r_G22 = ggeo[gbase + p_G22ID * p_Np];

#ifdef p_poisson
          r_GwJ = 0;
#else
          r_GwJ = ggeo[gbase + p_GWJID * p_Np];
#endif
        }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          s_q[j][i] = r_q[k];

          r_qt = 0;

#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++)
            r_qt += s_D[k][m] * r_q[m];
        }
      }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          dfloat qr = 0;
          dfloat qs = 0;

#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++) {
            qr += s_D[i][m] * s_q[j][m];
            qs += s_D[j][m] * s_q[m][i];
          }

          s_Gqs[j][i] = (r_G01 * qr + r_G11 * qs + r_G12 * r_qt);
          s_Gqr[j][i] = (r_G00 * qr + r_G01 * qs + r_G02 * r_qt);

          const dfloat lambda0 = lambda[0*loffset];

          r_Gqt = lambda0*(r_G02 * qr + r_G12 * qs + r_G22 * r_qt);
#ifdef p_poisson
          r_Auk = 0.0;
#else
          const dfloat lambda1 = lambda[1*loffset];
          r_Auk = r_GwJ * lambda1 * r_q[k];
#endif
        }
      }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++) {
            r_Auk   += s_D[m][j] * s_Gqs[m][i];
            r_Aq[m] += s_D[k][m] * r_Gqt;
            r_Auk   += s_D[m][i] * s_Gqr[j][m];
          }

          r_Aq[k] += r_Auk;
        }
      }
    }

    @barrier("local");

    for(int j = 0; j < p_Nq; ++j; @inner(1)) {
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
#pragma unroll p_Nq
        for(int k = 0; k < p_Nq; k++) {
          const dlong id = element * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
          Aq[id] = r_Aq[k];
        }
      }
    }
  }
}
#else
#define p_NelementsPerBlk 1
@kernel void ellipticPartialAxHex3D(const dlong Nelements,
                                    const dlong offset,
                                    const dlong loffset,
                                    @restrict const dlong*  elementList,
                                    @restrict const dfloat* ggeo,
                                    @restrict const dfloat* D,
                                    @restrict const dfloat* S,
                                    @restrict const dfloat* lambda,
                                    @restrict const dfloat* q,
                                    @restrict       dfloat* Aq)
{
//padding for bank conflicts
#if p_Nq==8 || p_Nq==4
#define p_pad 1
#else
#define p_pad 0
#endif

  for(int eo=0;eo<Nelements;eo+=p_NelementsPerBlk;@outer(0)){

    @shared dfloat s_D [p_Nq][p_Nq+p_pad];
    @shared dfloat s_DT[p_Nq][p_Nq+p_pad];
    @shared dfloat   s_q[p_NelementsPerBlk][p_Nq][p_Nq][p_Nq+p_pad];
    @shared dfloat s_Gqr[p_NelementsPerBlk][p_Nq][p_Nq][p_Nq+p_pad];
    @shared dfloat s_Gqs[p_NelementsPerBlk][p_Nq][p_Nq][p_Nq+p_pad];
    @shared dfloat s_Gqt[p_NelementsPerBlk][p_Nq][p_Nq][p_Nq+p_pad];

    @exclusive dlong r_e, element;
    @exclusive dfloat r_wJ;

    @exclusive int k, es;

    for(int ke=0;ke<p_Nq*p_NelementsPerBlk;++ke;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){

          //load operators
          if(ke==0){
            const int id = j*p_Nq+i;
            const dfloat Dji = D[id];
            s_D[j][i] = Dji;
            s_DT[i][j] = Dji;
          }

          k  = ke%p_Nq;
          es = ke/p_Nq;
          r_e = es+eo;

          if(r_e<Nelements){
            element = elementList[r_e];
            const dlong id = i + j*p_Nq + k*p_Nq*p_Nq + element*p_Np;
            s_q[es][k][j][i] = q[id];
          }
        }
      }
    }

    for(int ke=0;ke<p_Nq*p_NelementsPerBlk;++ke;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){

          if(r_e<Nelements){
            const dlong gbase = p_Nggeo*(element*p_Np + i + j*p_Nq + k*p_Nq*p_Nq);

            // 't' terms
            dfloat tmp=0.0;

            r_wJ = ggeo[gbase+p_GWJID];
            const dfloat G00 = ggeo[gbase+p_G00ID];
            const dfloat G01 = ggeo[gbase+p_G01ID];
            const dfloat G11 = ggeo[gbase+p_G11ID];
            const dfloat G02 = ggeo[gbase+p_G02ID];
            const dfloat G12 = ggeo[gbase+p_G12ID];
            const dfloat G22 = ggeo[gbase+p_G22ID];

            // #pragma unroll p_Unr
            for(int m = 0; m < p_Nq; ++m) {
              const dfloat pmji = s_q[es][m][j][i];
              const dfloat Dkm = s_DT[m][k];
              tmp += Dkm*pmji;
            }


            s_Gqr[es][k][j][i] = G02*tmp;
            s_Gqs[es][k][j][i] = G12*tmp;
            s_Gqt[es][k][j][i] = G22*tmp;


            // 'r' terms
            tmp = 0;
            // #pragma unroll p_Unr
            for(int m = 0; m < p_Nq; ++m) {
              const dfloat Dim = s_D[i][m];
              tmp += Dim*s_q[es][k][j][m];
            }

            s_Gqr[es][k][j][i] += G00*tmp;
            s_Gqs[es][k][j][i] += G01*tmp;
            s_Gqt[es][k][j][i] += G02*tmp;


            // 's' terms
            tmp = 0;
            // #pragma unroll p_Unr
            for(int m = 0; m < p_Nq; ++m) {
              const dfloat Djm = s_D[j][m];
              tmp += Djm*s_q[es][k][m][i];
            }

            s_Gqr[es][k][j][i] += G01*tmp;
            s_Gqs[es][k][j][i] += G11*tmp;
            s_Gqt[es][k][j][i] += G12*tmp;
          }
        }
      }
    }

    for(int ke=0;ke<p_Nq*p_NelementsPerBlk;++ke;@inner(2)){
      for(int j=0;j<p_Nq;++j;@inner(1)){
        for(int i=0;i<p_Nq;++i;@inner(0)){

          if(r_e<Nelements){
            dfloat tmpAp = s_q[es][k][j][i]*lambda*r_wJ;

            // use same matrix for both slices
            // #pragma unroll p_Unr
            for(int m=0;m<p_Nq;++m){
              const dfloat Dmi = s_D[m][i];
              const dfloat Dmj = s_D[m][j];

              tmpAp += Dmi*s_Gqr[es][k][j][m];
              tmpAp += Dmj*s_Gqs[es][k][m][i];
            }

            // #pragma unroll p_Unr
            for(int m=0;m<p_Nq;++m){
              const dfloat Gpt = s_Gqt[es][m][j][i];
              const dfloat Dmk = s_D[m][k];
              tmpAp += Dmk*Gpt;
            }

            const dlong base = i + j*p_Nq + k*p_Nq*p_Nq + element*p_Np;
            Aq[base] = tmpAp;
          }
        }
      }
    }
  }
}
#endif