@kernel void findpts_local_eval(
              const dlong Nfields,
              const dlong outputOffset,
              const dlong fieldOffset,
              dfloat * const out_base,   const dlong out_stride,
        const dlong  * const el_base,    const dlong el_stride,
        const dfloat * const r_base,     const dlong r_stride,
        const dlong  pn,
        @restrict const dfloat * const in,
        struct findpts_local_data *fd){

  for(dlong i=0;i<pn;++i;@outer){

    @shared dfloat wtr[p_Nq];
    @shared dfloat wts[p_Nq];
    @shared dfloat wtt[p_Nq];
    @shared dfloat sums[p_Nq];

    const dfloat * r = CAT(dfloat, r, i);

    for(dlong j=0;j<p_Nq;++j;@inner){
      lagrange_eval(wtr, fd->fed.lag_data[0], r[0], j);
      lagrange_eval(wts, fd->fed.lag_data[1], r[1], j);
      lagrange_eval(wtt, fd->fed.lag_data[2], r[2], j);
    }
    @barrier("local");

    for(int fld = 0; fld < Nfields; ++fld){

    const dlong el = *CAT(dlong, el, i);
    const dfloat *in_el = in + el*p_Np + fld * fieldOffset;

    for (dlong j=0;j<p_Nq;++j;@inner){
      dfloat sum_j = 0;
      for(dlong k=0;k<p_Nq;++k){
        dfloat sum_k = 0;

        for(dlong l=0;l<p_Nq;++l){
          sum_k += in_el[j + k*p_Nq + l*p_Nq*p_Nq] * wtt[l];
        }
        sum_j += wts[k]*sum_k;
      }
      sums[j] = wtr[j]*sum_j;
    }
    @barrier("local");
#if p_Nq>16
    for(dlong j=0;j<p_Nq;++j;@inner){
      if(j<16&&j<p_Nq-16){
        sums[j] += sums[j+16];
      }
    }
    @barrier("local");
#endif
#if p_Nq>8
    for(dlong j=0;j<p_Nq;++j;@inner){
      if(j<8&&j<p_Nq-8){
        sums[j] += sums[j+8];
      }
    }
    @barrier("local");
#endif
#if p_Nq>4
    for(dlong j=0;j<p_Nq;++j;@inner){
      if(j<4&&j<p_Nq-4){
        sums[j] += sums[j+4];
      }
    }
    @barrier("local");
#endif
#if p_Nq>2
    for(dlong j=0;j<p_Nq;++j;@inner){
      if(j<2&&j<p_Nq-2){
        sums[j] += sums[j+2];
      }
    }
    @barrier("local");
#endif
    for(dlong j=0;j<p_Nq;++j;@inner){
      if(j==0){
        dfloat * result = AT(dfloat, out, i) + fld * outputOffset;
        *result = sums[0] + sums[1];
      }
    }
    @barrier("local");
  }
  }
}
