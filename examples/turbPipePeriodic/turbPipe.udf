//
// nekRS User Defined File
//
#include <math.h>
#include "udf.hpp"
#include "casedata.h"

/* User Functions */

void userf(nrs_t *nrs, dfloat time, occa::memory o_U, occa::memory o_FU)
{
  mesh_t* mesh = nrs->meshV;
  dfloat mue, rho;
  platform->options.getArgs("VISCOSITY", mue);
  platform->options.getArgs("DENSITY", rho);
  const dfloat RE_B = rho/mue; 
  const dfloat DPDZ = 4 * (2*RE_TAU/RE_B)*(2*RE_TAU/RE_B);

  occa::memory o_FUz = o_FU + 2*nrs->fieldOffset*sizeof(dfloat);
  platform->linAlg->fill(mesh->Nlocal, DPDZ, o_FUz);
}

void uservp(nrs_t *nrs, dfloat time, occa::memory o_U, occa::memory o_S,
            occa::memory o_UProp, occa::memory o_SProp)
{
}


/* UDF Functions */                                                      

void UDF_LoadKernels(nrs_t *nrs)
{
}

void UDF_Setup(nrs_t *nrs)
{
  if(platform->options.compareArgs("CONSTANT FLOW RATE DRIVER", "FALSE")){
    // assign function pointer to drive flow by constant mean pressure gradient
    udf.uEqnSource = &userf;
  }
}

void UDF_ExecuteStep(nrs_t *nrs, dfloat time, int tstep)
{
  mesh_t* mesh = nrs->meshV;
  occa::memory o_Uz = nrs->o_U + 2*nrs->fieldOffset*sizeof(dfloat);
  const dfloat ubar = platform->linAlg->innerProd(mesh->Nlocal, o_Uz, mesh->o_LMM, platform->comm.mpiComm)/mesh->volume;
  if (platform->comm.mpiRank == 0 && nrs->isOutputStep) printf(" uBulk: %g\n", ubar);
}
