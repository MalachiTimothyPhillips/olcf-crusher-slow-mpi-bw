//
// nekRS User Defined File
//

#include <math.h>
#include "udf.hpp"

static dfloat energyComputed[3] = {0};
occa::kernel magSqrKernel;

/* UDF Functions */                                                      

void UDF_LoadKernels(occa::properties& kernelInfo)
{
  magSqrKernel = oudfBuildKernel(kernelInfo, "magSqr");
}

void UDF_Setup(nrs_t *nrs)
{
 // set IC
 mesh_t *mesh = nrs->meshV;
 for (int n=0; n<mesh->Np*mesh->Nelements; n++) {
   dfloat x = mesh->x[n];
   dfloat y = mesh->y[n];
   dfloat z = mesh->z[n];
   nrs->U[n+0*nrs->fieldOffset] = sin(x)*cos(y)*cos(z);;
   nrs->U[n+1*nrs->fieldOffset] = -cos(x)*sin(y)*cos(z); 
   nrs->U[n+2*nrs->fieldOffset] = 0; 
 }
}

void UDF_ExecuteStep(nrs_t *nrs, dfloat time, int tstep)
{
  mesh_t *mesh = nrs->meshV;

#if 1
  const dfloat scale = 0.5/mesh->volume;
  magSqrKernel(mesh->Nlocal, nrs->fieldOffset, nrs->o_U, platform->o_mempool.slice0);
  const dfloat energy = scale * platform->linAlg->innerProd(mesh->Nlocal, platform->o_mempool.slice0, mesh->o_LMM, platform->comm.mpiComm, 0);

  nrs->curlKernel(
    mesh->Nelements,
    0,
    mesh->o_vgeo,
    mesh->o_D,
    nrs->fieldOffset,
    nrs->o_U,
    platform->o_mempool.slice0);
  magSqrKernel(mesh->Nlocal, nrs->fieldOffset, platform->o_mempool.slice0, platform->o_mempool.slice3);
  const dfloat enstrophy = scale * platform->linAlg->innerProd(mesh->Nlocal, platform->o_mempool.slice3, mesh->o_LMM, platform->comm.mpiComm, 0);

  dfloat mue, rho;
  platform->options.getArgs("VISCOSITY", mue);
  platform->options.getArgs("DENSITY", rho);
  const dfloat nu = mue/rho;
  const dfloat rhs = -2*nu*enstrophy;

  if(platform->comm.mpiRank == 0)
    printf("enstrophy= %g, energy= %g, nu*enstrophy= %g", enstrophy, energy, rhs);

  if(tstep) {
    dfloat sum = 0.0;
    for(int i = 0 ; i < nrs->nBDF; ++i){
      sum += nrs->coeffBDF[i] * energyComputed[i];
    }
    energyComputed[2] = energyComputed[1];
    energyComputed[1] = energyComputed[0];
    energyComputed[0] = energy;
    const dfloat dissipationRate = (nrs->g0*energy - sum) / nrs->dt[0];
    const dfloat nuEff = -0.5*dissipationRate/enstrophy;
    if(platform->comm.mpiRank == 0)
      printf(", d(energy)/dt=%g, nuEff/nu= %g)", dissipationRate, nuEff/nu);
  } else {
    energyComputed[0] = energy;
  }

  if(platform->comm.mpiRank == 0) printf("\n");
#endif

  if (nrs->isOutputStep) {
    nek::ocopyToNek(time, tstep);
    nek::userchk();
  }
}
